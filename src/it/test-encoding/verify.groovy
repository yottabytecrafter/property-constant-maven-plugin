import java.io.File
import java.nio.file.Files
import java.nio.charset.StandardCharsets

// 'basedir' is injected by the maven-invoker-plugin as a File object
def projectBaseDir = basedir 
def buildDir = new File(projectBaseDir, "target")

// Check UTF-8 generated file
def generatedUtf8File = new File(buildDir, "generated-sources/java-utf8/com/example/utf8/TestUtf8Properties.java")
assert generatedUtf8File.exists() : "UTF-8 Properties Java file was not generated: " + generatedUtf8File.getAbsolutePath()

String utf8Content = generatedUtf8File.getText(StandardCharsets.UTF_8.name()) // Specify UTF-8 for reading

// Class Javadoc
assert utf8Content.contains("/**\n * Contains constants generated from the properties file: 'test-utf8.properties'.")
assert utf8Content.contains("* This class is automatically generated by the property-constant-maven-plugin.")

// Constants Javadoc and values
assert utf8Content.contains("/**\n     * Constant for property key: 'greeting.german'.\n     */")
assert utf8Content.contains('public static final String GREETING_GERMAN = "Hallo Welt!";')

assert utf8Content.contains("/**\n     * Constant for property key: 'greeting.special'.\n     */")
assert utf8Content.contains('public static final String GREETING_SPECIAL = "ÄÖÜßµ€§@";')

assert utf8Content.contains("/**\n     * Constant for property key: 'value.with.umlaut'.\n     */")
assert utf8Content.contains('public static final String VALUE_WITH_UMLAUT = "Ein schöner Tag";')

assert utf8Content.contains("/**\n     * Constant for property key: 'key.with.ç'.\n     */")
assert utf8Content.contains('public static final String KEY_WITH_Ç = "França";')

assert utf8Content.contains("/**\n     * Constant for property key: 'key.with.é'.\n     */")
assert utf8Content.contains('public static final String KEY_WITH_É = "éléphant";')

assert utf8Content.contains("/**\n     * Constant for property key: 'key.with.ñ'.\n     */")
assert utf8Content.contains('public static final String KEY_WITH_Ñ = "España";')


// Check ISO-8859-1 generated file (read as ISO, generated as UTF-8)
def generatedIsoFile = new File(buildDir, "generated-sources/java-iso/com/example/iso/TestIsoProperties.java")
assert generatedIsoFile.exists() : "ISO Properties Java file was not generated: " + generatedIsoFile.getAbsolutePath()

String isoContent = generatedIsoFile.getText(StandardCharsets.UTF_8.name()) // Generated file is UTF-8

// Class Javadoc
assert isoContent.contains("/**\n * Contains constants generated from the properties file: 'test-iso.properties'.")

// Constants Javadoc and values
assert isoContent.contains("/**\n     * Constant for property key: 'greeting.iso'.\n     */")
assert isoContent.contains('public static final String GREETING_ISO = "Grüßen";')

assert isoContent.contains("/**\n     * Constant for property key: 'another.value'.\n     */")
assert isoContent.contains('public static final String ANOTHER_VALUE = "Straße";')

// Basic check for UTF-8 encoding (presence of multi-byte char for Ä)
// This is a simple check, more robust would be to check bytes
byte[] utf8FileBytes = Files.readAllBytes(generatedUtf8File.toPath())
boolean foundMultiByteForAuml = false
for (int i = 0; i < utf8FileBytes.length - 1; i++) {
    // Check for Ä (C3 A4 in UTF-8)
    if (utf8FileBytes[i] == (byte)0xC3 && utf8FileBytes[i+1] == (byte)0xA4) {
        foundMultiByteForAuml = true
        break
    }
}
assert foundMultiByteForAuml : "Generated UTF-8 Java file does not seem to contain UTF-8 encoded Ä"

byte[] isoFileBytes = Files.readAllBytes(generatedIsoFile.toPath())
boolean foundMultiByteForUuml = false
for (int i = 0; i < isoFileBytes.length - 1; i++) {
    // Check for ü (C3 BC in UTF-8) in "Grüßen"
    if (isoFileBytes[i] == (byte)0xC3 && isoFileBytes[i+1] == (byte)0xBC) {
        foundMultiByteForUuml = true
        break
    }
}
assert foundMultiByteForUuml : "Generated ISO (but UTF-8 output) Java file does not seem to contain UTF-8 encoded ü"


return true
